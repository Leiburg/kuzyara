
Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	Для Каждого ТекСтрока Из ТаблицаРегистров Цикл
		ЭлементыФормы.ТаблицаРегистров.ТекущаяСтрока = ТекСтрока;
		Если ТекСтрока.РазмерТаблицыИтогов <= 0 Тогда
			Продолжить;
		КонецЕсли;
		Индекс = ТаблицаРегистров.Индекс(ТекСтрока);
		Состояние(ТекСтрока.Регистр + " " + (Индекс+1) + "/" + ТаблицаРегистров.Количество());
		ТаблицаИзмеренийОбновить(Неопределено);
		ОбработкаПрерыванияПользователя();
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьПодключениеКБД() 
	Если ПустаяСтрока(ИмяСервераMSSQL) Тогда
		ИмяСервераMSSQL = "vsql-dev-perf";
	КонецЕсли;
	Если ПустаяСтрока(ИмяБазыДанныхMSSQL) Тогда
		ИмяБазыДанныхMSSQL = "Rossko_UT_Front_mpi";
	КонецЕсли;
	Если ПустаяСтрока(ИмяПользователяMSSQL) Тогда
		ИмяПользователяMSSQL = "sa1c";
	КонецЕсли;
	Если ПустаяСтрока(ПарольMSSQL) Тогда
		ПарольMSSQL = "1qaz%RDX";
	КонецЕсли;
	Connection = Неопределено;
	//Попытка
		Connection                    	= Новый COMОбъект("ADODB.Connection");
		Connection.ConnectionString   	= "Provider=SQLOLEDB.1;Password=" + ПарольMSSQL + ";Persist Security Info=True;User ID=" +
										  ИмяПользователяMSSQL + ";Initial Catalog=" + ИмяБазыДанныхMSSQL + "; Data Source=" + ИмяСервераMSSQL + ";";
		//Connection.ConnectionString 	= "Provider=SQLOLEDB.1;Password=1qaz%RDX;Persist Security Info=True;User ID=sa1c;Initial Catalog=Rossko_UT_Front_mpi; Data Source=vsql-dev-perf;";//СтрокаПодключения;
		Connection.ConnectionTimeout  	= 10;
	Connection.Open();
	//Исключение;
	//	ТекстОшибки = ("Не доступно подключение SQL; Ошибка: " + ОписаниеОшибки());
	//	Сообщить(ТекстОшибки);
	//	Предуп
	//	Connection = Неопределено;
	//КонецПопытки;	
	
	Возврат Connection;
КонецФункции

Функция ПолучитьРазмерТаблицыИтогов(ИмяРегистра, Connection, ИмяТаблицыSQL = "")
	Результат = 0;
	
	ИспользованиеИтоговОтключено = НЕ РегистрыНакопления[ИмяРегистра].ПолучитьИспользованиеИтогов();
	Если ИспользованиеИтоговОтключено Тогда
		Возврат -1;
	КонецЕсли;
	
	
	МетаРН = Метаданные.НайтиПоПолномуИмени("регистрнакопления."+ИмяРегистра);
	
	//Ресурсы = Новый Соответствие;
	//
	//Для каждого ТекРесурс Из МетаРН.Ресурсы Цикл
	//	Ресурсы.Вставить(ТекРесурс.ПолноеИмя(),Истина);
	//КонецЦикла;
	
	
	Мас = Новый Массив;
	Мас.Добавить(МетаРН);
	
	ТаблицаДанных = ПолучитьСтруктуруХраненияБазыДанных(Мас);
	
	//МассивИменРесурсов 	= Новый Массив;
	ИмяТаблицыSQL 		= "";
	
	Для Каждого Зап Из ТаблицаДанных Цикл
		Если нрег(Зап.Назначение) = "итоги" Тогда //или нрег(Зап.Назначение) = "обороты" Или (Не ЗначениеЗаполнено(ИмяТаблицыSQL) И нрег(Зап.Назначение) = "новыеобороты") Тогда
			ИмяТаблицыSQL = "_" + Зап.ИмяТаблицыХранения;
			//МассивИменРесурсов.Очистить();
			//Для каждого Кол Из Зап.Поля Цикл
			//	Если Ресурсы.Получить(Кол.Метаданные) = Истина ТОгда
			//		МассивИменРесурсов.Добавить("_" + Кол.ИмяПоляХранения);					
			//	КонецЕсли;
			//КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	
	//Если НЕ ЗначениеЗаполнено(ИмяТаблицыSQL) Тогда
	//	Возврат;
	//КонецЕсли;
	
	
	Результат                     = Новый COMОбъект("ADODB.Command");
	Результат.ActiveConnection    = Connection;
	Результат.CommandType         = 1; 
	Результат.commandTimeout 	  = 900;
	
	
	Результат.CommandText  = 
		"SELECT
		|   Total_Rows= SUM(st.row_count)
		|FROM
		|   sys.dm_db_partition_stats st
		|WHERE
		|    object_name(object_id) = '" + ИмяТаблицыSQL + "' AND (index_id < 2)";
	Ответ =  Результат.Execute();
	
	Пока Ответ.EOF() = 0 Цикл 
		Результат = Ответ.Fields("Total_Rows").Value;
		Ответ.MoveNext(); 
	КонецЦикла;	

	//
	Возврат Результат;

КонецФункции

Функция УдалитьСтроки(Таблица, МассивСтрок, МассивИзмерений)
	Отбор = Новый Структура;
	Для Каждого Измерение Из МассивИзмерений Цикл
		Отбор.Вставить(Измерение);
	КонецЦикла;
	
	КоличествоУдалено = 0;
	Для Каждого ТекСтрока Из МассивСтрок Цикл
		ЗаполнитьЗначенияСвойств(Отбор, ТекСтрока);
		
		НайденныеСтроки = Таблица.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Таблица.Удалить(НайденнаяСтрока);
			КоличествоУдалено = КоличествоУдалено + 1;
		КонецЦикла;
	КонецЦикла;
	Возврат КоличествоУдалено;
КонецФункции

Функция СвернутыеРазвернуто(МассивСтрок, ТаблицаЗначений)
	
	НоваяТаблица = ТаблицаЗначений.СкопироватьКолонки();
	НоваяТаблица.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5,0)));
	Для Каждого ТекущаяСтрока Из МассивСтрок Цикл
		НоваяСтрока = НоваяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.НомерСтроки = НоваяТаблица.Индекс(НоваяСтрока)+1;
		//Отбор = Новый Структура;
		//Для Каждого Измерение Из МассивИзмерений Цикл
		//	Отбор.Вставить(Измерение);
		//КонецЦикла;
		//ЗаполнитьЗначенияСвойств(Отбор, ТекСтрока);
		//найдСтр = ТаблицаРезультат.НайтиСтроки(Отбор);
		//Для Каждого текст из найдстр цикл
		//	Таблицарезультат.удалить(текст);
		//Конеццикла;
	КонецЦикла;
	//НоваяСтрока.НайденныеДубли = НайденныеДубли;
	Возврат НоваяТаблица;
КонецФункции

Функция РазностьМассивов(Знач МассивОснование, Массив)
	Результат = Новый Массив;
	Для Каждого Значение Из МассивОснование Цикл
		Индекс = Массив.Найти(Значение);
		Если Индекс = Неопределено Тогда
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат
КонецФункции

Функция ПолучитьТаблицуСочетанийИзмерений(МассивСочетаний, МассивИзмерений)
	ТаблицаСочетаний = Новый ТаблицаЗначений;
	Для Каждого ТекСочетание Из МассивСочетаний Цикл
		Если ТекСочетание.Количество() > ТаблицаСочетаний.Колонки.Количество() Тогда
			Для Сч = ТаблицаСочетаний.Колонки.Количество() По ТекСочетание.Количество() - 1 Цикл
				ТаблицаСочетаний.Колонки.Добавить("Поле"+Сч);
			КонецЦикла;
		КонецЕсли;
		НовСтрока = ТаблицаСочетаний.Добавить();
		Для Сч = 0 По ТекСочетание.Количество() - 1 Цикл
			НовСтрока[Сч] = ТекСочетание[Сч];
		КонецЦикла;
	КонецЦикла;
	
	// вычислим доп. данные для каждого сочетания
	ТаблицаСочетаний.Колонки.Добавить("КоличествоИзмерений");
	ТаблицаСочетаний.Колонки.Добавить("МассивИзмерений");
	ТаблицаСочетаний.Колонки.Добавить("МассивИзмеренийИскл");
	ТаблицаСочетаний.Колонки.Добавить("СтрокаИзмерений");
	ТаблицаСочетаний.Колонки.Добавить("СтрокаИзмеренийИскл");
	Для Сч = 0 По ТаблицаСочетаний.Количество() - 1 Цикл
		ТаблицаСочетаний[Сч].КоличествоИзмерений 	= МассивСочетаний[Сч].Количество();
		ТаблицаСочетаний[Сч].МассивИзмерений 		= МассивСочетаний[Сч];
		ТаблицаСочетаний[Сч].МассивИзмеренийИскл 	= РазностьМассивов(МассивИзмерений, МассивСочетаний[Сч]);
		ТаблицаСочетаний[Сч].СтрокаИзмерений 		= МассивВСтрокуСРазделителями(ТаблицаСочетаний[Сч].МассивИзмерений);
		ТаблицаСочетаний[Сч].СтрокаИзмеренийИскл 	= МассивВСтрокуСРазделителями(ТаблицаСочетаний[Сч].МассивИзмеренийИскл);
	КонецЦикла;
	ТаблицаСочетаний.Сортировать("КоличествоИзмерений Убыв");
	
	Возврат ТаблицаСочетаний;
КонецФункции

Функция МассивВСтрокуСРазделителями(Массив)
	Результат = "";
	Для Сч = 0 По Массив.Количество() - 1 Цикл
		Результат = Результат + Массив[Сч] + ?(Сч <> Массив.Количество() - 1, ",", "");
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПолучитьМассивИзмеренийРегистра(ИмяРегистра)
	Результат = Новый Массив;
	Для Каждого Измерение Из Метаданные.РегистрыНакопления[ИмяРегистра].Измерения Цикл
		Результат.Добавить(Измерение.Имя);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Процедура ОбновитьНажатие(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ТаблицаРегистровПриАктивизацииСтроки(Элемент)
	ТекСтрока = ЭлементыФормы.ТаблицаРегистров.ТекущаяСтрока;
	Если ТекСтрока <> Неопределено Тогда
		ТаблицаИзмерений.Очистить();
		Если ТекСтрока.ТаблицаИзмерений <> Неопределено Тогда
			ТаблицаИзмерений = ТекСтрока.ТаблицаИзмерений.Скопировать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция СгенерироватьСочетанияРекурсивно(Знач МассивИзмерений, Результат = Неопределено, Знач ТекИзмерение = "", Знач ТекМассив = Неопределено)
	Если Результат = Неопределено Тогда
		Результат = Новый Массив;
		ТекМассив = Новый ФиксированныйМассив(Результат);
	КонецЕсли;
	
	ТекМассивИзмерений = Новый Массив;
	Для Каждого Измерение Из МассивИзмерений Цикл
		Если Измерение > ТекИзмерение Тогда
			ТекМассивИзмерений.Добавить(Измерение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Измерение Из ТекМассивИзмерений Цикл
		НовыйМассив = Новый Массив(ТекМассив);
		НовыйМассив.Добавить(Измерение);
		Результат.Добавить(НовыйМассив);

		СгенерироватьСочетанияРекурсивно(ТекМассивИзмерений, Результат, Измерение, Новый ФиксированныйМассив(НовыйМассив));
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура ТаблицаИзмеренийПриАктивизацииСтроки(Элемент)
	Если ЭлементыФормы.ТаблицаРегистров.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяРегистра = ЭлементыФормы.ТаблицаРегистров.ТекущаяСтрока.Регистр;
	Если ЭлементыФормы.ТаблицаИзмерений.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяИзмерения = ЭлементыФормы.ТаблицаИзмерений.ТекущаяСтрока.Измерение;
	ТаблицаДублей = ЭлементыФормы.ТаблицаИзмерений.ТекущаяСтрока.НайденныеДубли;
	МассивИзмерений = ЭлементыФормы.ТаблицаИзмерений.ТекущаяСтрока.МассивИзмерений;
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ * 
		|ПОМЕСТИТЬ Движения 
		|ИЗ &тзДубли КАК вт;
		|
		|ВЫБРАТЬ первые 1000
		|	втДубли.НомерСтроки как N, Движения.*
		|ИЗ
		|	Движения КАК втДубли
		|		внутреннее СОЕДИНЕНИЕ РегистрНакопления."+ИмяРегистра+" КАК Движения ПО Истина ";
	//
	Для Каждого Измерение Из МассивИзмерений Цикл
		Запрос.Текст = Запрос.Текст + "
		|		И втДубли."+Измерение+" = Движения." + Измерение;
	КонецЦикла;
	
	СтрокаУпорядочивания = " УПОРЯДОЧИТЬ ПО втДубли.НомерСтроки";
	БезУпорядочивания = Запрос.Текст;
	Запрос.Текст = Запрос.Текст + СтрокаУпорядочивания;

	Запрос.Параметры.Вставить("тзДубли", ТаблицаДублей);
	д1=ТекущаяУниверсальнаяДатаВМиллисекундах();
	//РезультатЗапроса = Запрос.Выполнить();
	д2=ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Запрос.Текст = БезУпорядочивания;
	РезультатЗапроса = Запрос.Выполнить();
	д3=ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	//Сообщить(СтрШаблон("Время1: %1, Время2: %2", (д2-д1), (д3-д2)));
	
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ТаблицаДвижений = РезультатЗапроса.Выгрузить();
	ТаблицаДвижений.Сортировать("N");
	ЭлементыФормы.ТаблицаДвижений.СоздатьКолонки();
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры

Процедура ТаблицаИзмеренийОбновить(Кнопка)
	Если ЭлементыФормы.ТаблицаРегистров.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РазмерТаблицы = ЭлементыФормы.ТаблицаРегистров.ТекущаяСтрока.РазмерТаблицыИтогов;
	ИмяРегистра = ЭлементыФормы.ТаблицаРегистров.ТекущаяСтрока.Регистр;
	МассивИзмерений = ПолучитьМассивИзмеренийРегистра(ИмяРегистра);
	
	// получим остатки по текущему измерению
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ "+Формат(РазмерВыборки, "ЧГ=0")+"
		|	*
		|ИЗ
		|	РегистрНакопления."+ИмяРегистра+".Остатки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаРезультат = РезультатЗапроса.Выгрузить();
	
	ИмяРесурса = Метаданные.РегистрыНакопления[ИмяРегистра].Ресурсы[0].Имя+"Остаток";
	ТаблицаРезультат.Индексы.Добавить(ИмяРесурса);
	
	// инициализируем таблицу измерений сочетаниями
	
	МассивСочетаний = СгенерироватьСочетанияРекурсивно(МассивИзмерений);

	ТаблицаСочетаний = ПолучитьТаблицуСочетанийИзмерений(МассивСочетаний, МассивИзмерений);
	
	ТаблицаИзмерений.Очистить();
	Для Каждого СтрокаСочетаний Из ТаблицаСочетаний Цикл
		Если СтрокаСочетаний.КоличествоИзмерений < МассивИзмерений.Количество() - 2 Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаПоИзмерению = ТаблицаРезультат.Скопировать();
		ТаблицаПоИзмерению.Свернуть(СтрокаСочетаний.СтрокаИзмерений, ИмяРесурса);
		
		Отбор = Новый Структура(ИмяРесурса, 0);
		НулевыеСтроки = ТаблицаПоИзмерению.НайтиСтроки(Отбор);
		
		Если НулевыеСтроки.Количество() > 0 Тогда
		
			НоваяСтрока = ТаблицаИзмерений.Добавить();
			НоваяСтрока.Измерение 			= СтрокаСочетаний.СтрокаИзмеренийИскл;
			НоваяСтрока.КоличествоДублей 	= НулевыеСтроки.Количество();
			НоваяСтрока.МассивИзмерений 	= СтрокаСочетаний.МассивИзмерений;
			НоваяСтрока.НайденныеДубли 		= СвернутыеРазвернуто(НулевыеСтроки, ТаблицаРезультат);
			
			КоличествоУдалено = УдалитьСтроки(ТаблицаРезультат, НулевыеСтроки, СтрокаСочетаний.МассивИзмерений);
			
			ТабДублей = НоваяСтрока.НайденныеДубли.Скопировать();
			ТабДублей.Свернуть("НомерСтроки");
			НоваяСтрока.КоличествоДублей 	= ТабДублей.Количество();
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаИзмерений.Сортировать("КоличествоДублей Убыв");
	ЭлементыФормы.ТаблицаРегистров.ТекущаяСтрока.ТаблицаИзмерений = ТаблицаИзмерений.Скопировать();
	ЭлементыФормы.ТаблицаРегистров.ТекущаяСтрока.ПроцентДублей = РасчитатьПроцентДублей(ТаблицаИзмерений, Мин(РазмерТаблицы, РазмерВыборки));
КонецПроцедуры

Функция РасчитатьПроцентДублей(ТаблицаИзмерений, РазмерВыборки)
	Если ТаблицаИзмерений = Неопределено ИЛИ ТаблицаИзмерений.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	НоваяТаблица = ТаблицаИзмерений.Скопировать();
	НоваяТаблица.Свернуть("", "КоличествоДублей");
	Возврат НоваяТаблица[0].КоличествоДублей/РазмерВыборки * 100;
КонецФункции

Процедура ТаблицаРегистровОбновитьВсе(Кнопка)
КонецПроцедуры

Процедура ПриОткрытии()
	Если РазмерВыборки = 0 Тогда
		РазмерВыборки = 1000;
	КонецЕсли;
	
	Connection = ПолучитьПодключениеКБД();
	
	Если Connection = Неопределено Тогда
		Возврат ;
	КонецЕсли;
	Если ТаблицаРегистров.Количество() = 0 Тогда
		Для Каждого Регистр Из Метаданные.РегистрыНакопления Цикл
			Индекс = Метаданные.РегистрыНакопления.Индекс(Регистр);
			Состояние(Регистр.Имя +  " " + (Индекс+1) + "/" + Метаданные.РегистрыНакопления.Количество());
			Если Регистр.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки  Тогда
				НоваяСтрока = ТаблицаРегистров.Добавить();
				НоваяСтрока.Регистр = Регистр.Имя;
				НоваяСтрока.РегистрОстатки = Регистр.Имя + ".Остатки";
				НоваяСтрока.РазмерТаблицыИтогов = ПолучитьРазмерТаблицыИтогов(Регистр.Имя, Connection, НоваяСтрока.ИмяТаблицы);
				НоваяСтрока.ПроцентДублей = "Вычислить...";
				//Прервать;
			КонецЕсли;
			ОбработкаПрерыванияПользователя();
		КонецЦикла;
	КонецЕсли;
	
	ПолучитьРазмерыТаблицSQL(Connection);
	
	Connection.Close();
	
	ТаблицаРегистров.Сортировать("РазмерТаблицыИтогов УБЫВ");
	ТаблицаРазмерыТаблицSQL.Сортировать("РазмерМб УБЫВ");
	
КонецПроцедуры

Процедура ПолучитьРазмерыТаблицSQL(Connection)
	Результат                     = Новый COMОбъект("ADODB.Command");
	Результат.ActiveConnection    = Connection;
	Результат.CommandType         = 1; 
	Результат.commandTimeout 	  = 900;
	
	
	Результат.CommandText  = 
		 "SELECT 
	     |    t.NAME AS TableName,
	     |    s.Name AS SchemaName,
	     |    p.rows AS Rows,
	     |    SUM(a.total_pages) * 8 AS TotalSpaceKB, 
	     |    CAST(ROUND(((SUM(a.total_pages) * 8) / 1024.00), 2) AS NUMERIC(36, 2)) AS TotalSpaceMB,
	     |    SUM(a.used_pages) * 8 AS UsedSpaceKB, 
	     |    CAST(ROUND(((SUM(a.used_pages) * 8) / 1024.00), 2) AS NUMERIC(36, 2)) AS UsedSpaceMB, 
	     |    (SUM(a.total_pages) - SUM(a.used_pages)) * 8 AS UnusedSpaceKB,
	     |    CAST(ROUND(((SUM(a.total_pages) - SUM(a.used_pages)) * 8) / 1024.00, 2) AS NUMERIC(36, 2)) AS UnusedSpaceMB
	     |FROM 
	     |    sys.tables t
	     |INNER JOIN      
	     |    sys.indexes i ON t.OBJECT_ID = i.object_id
	     |INNER JOIN 
	     |    sys.partitions p ON i.object_id = p.OBJECT_ID AND i.index_id = p.index_id
	     |INNER JOIN 
	     |    sys.allocation_units a ON p.partition_id = a.container_id
	     |LEFT OUTER JOIN 
	     |    sys.schemas s ON t.schema_id = s.schema_id
	     |WHERE 
	     |    t.NAME NOT LIKE 'dt%'
	     |    AND t.is_ms_shipped = 0
	     |    AND i.OBJECT_ID > 255 
	     |GROUP BY 
	     |    t.Name, s.Name, p.Rows
	     |ORDER BY 
	     |    TotalSpaceMB DESC, t.Name";
	Ответ =  Результат.Execute();
	
	// TableName, Rows, TotalSpaceMB
	ТаблицаРазмерыТаблицSQL.Очистить();
	
	Пока Ответ.EOF() = 0 Цикл 
		НоваяСтрока = ТаблицаРазмерыТаблицSQL.Добавить();
		НоваяСтрока.ИмяТаблицыSQL = Ответ.Fields("TableName").Value;
		НоваяСтрока.КоличествоСтрок = Ответ.Fields("Rows").Value;
		НоваяСтрока.РазмерМб = Ответ.Fields("TotalSpaceMB").Value;

		Ответ.MoveNext(); 
	КонецЦикла;	
КонецПроцедуры

Процедура ТаблицаРегистровВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	Если Колонка.Имя = "ПроцентДублей" И ВыбраннаяСтрока.ПроцентДублей = "Вычислить..." Тогда
		ТаблицаИзмеренийОбновить(Неопределено);
	КонецЕсли;
КонецПроцедуры

Процедура ТаблицаДвиженийПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.N % 2 = 0 Тогда
		ОформлениеСтроки.ЦветФона = WebЦвета.СеребристоСерый;
	КонецЕсли;
КонецПроцедуры

Процедура ПарольОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтароеЗначение = Элемент.Значение;
	Элемент.РежимПароля = НЕ Элемент.РежимПароля;
	Элемент.Значение = "";
	Элемент.Значение = СтароеЗначение;
	Обновить();
КонецПроцедуры

Процедура ПолучитьРазмерыТаблицНажатие(Элемент)
	ПриОткрытии();
КонецПроцедуры

Процедура КнопкаЗаполнитьСтруктураХраненияБазыДанныхНажатие(Элемент)
	ТаблицаХранения = ПолучитьСтруктуруХраненияБазыДанных();
	ТаблицаХранения.Индексы.Добавить("ИмяТаблицыХранения");
	
	Для Каждого ТекСтрока Из ТаблицаРазмерыТаблицSQL Цикл
		ИмяТаблицыДляПоиска = СтрЗаменить(Сред(ТекСтрока.ИмяТаблицыSQL, 2), "_", ".");
		НайденнаяТаблица = ТаблицаХранения.Найти(ИмяТаблицыДляПоиска, "ИмяТаблицыХранения");
		
		Если НайденнаяТаблица <> Неопределено Тогда
			ТекСтрока.ИмяТаблицы = НайденнаяТаблица.Метаданные 
				+ ?(НайденнаяТаблица.Назначение <> "Основная" И НайденнаяТаблица.Назначение <> "ТабличнаяЧасть", 
						" " + НайденнаяТаблица.Назначение, "");
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

ТаблицаИзмерений.Колонки.Добавить("НайденныеДубли");
ТаблицаИзмерений.Колонки.Добавить("МассивИзмерений");	

ТаблицаРегистров.Колонки.Добавить("ТаблицаИзмерений");	

